@typeparam T

@if (!IsEmptyList())
{
    <nav aria-label="Page navigation example">
        <ul class="pagination text-end">
            <li class="page-item @(IsFirstBlock() ? "disabled" : "") @(PaginationInfo.CurrentPage == 1 ? "active" : "")" @onclick="@(!IsFirstBlock() ? () => HandleClickPage(1) : null)">
                <a class="page-link" role="button"><span aria-hidden="true">First</span></a>
            </li>
            <li class="page-item @(!IsFirstBlock() ? "" : "disabled")" @onclick="@(!IsFirstBlock() ? () => HandleClickNext(false) : null)">
                <a class="page-link" role="button">&laquo;</a>
            </li>

            @for (int i = PaginationInfo.StartPage; i <= PaginationInfo.EndPage; i++)
            {
                var pageNumber = i;
                var isCurrentPage = PaginationInfo.CurrentPage == i ? true : false;

                <li class="page-item @(isCurrentPage ? "active" : "")" @onclick="@(!isCurrentPage ? () => HandleClickPage(pageNumber): null)">
                    <a class="page-link" role="button">@(pageNumber)</a>
                </li>
            }

            <li class="page-item @(!IsLastBlock() ? "" : "disabled")" @onclick="@(!IsLastBlock() ? () => HandleClickNext() : null)">
                <a class="page-link" role="button">&raquo;</a>
            </li>
            <li class="page-item @(IsLastBlock() ? "disabled" : "") @(PaginationInfo.CurrentPage == PaginationInfo.TotalPages && PaginationInfo.CurrentPage != 1? "active" : "")" @onclick="@(!IsLastBlock() ? () => HandleClickPage(PaginationInfo.TotalPages) : null)">
                <a class="page-link" role="button"><span aria-hidden="true">Last</span></a>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter]
    public PaginationInfo<T> PaginationInfo { get; set; }

    [Parameter]
    public int PagePerPagingBlock { get; set; } = 5;

    [Parameter]
    public EventCallback GetPaginationInfoAsync { get; set; }

    public async Task HandleClickPage(int pageNum)
    {        
        PaginationInfo.CurrentPage = pageNum;
        await GetPaginationInfoAsync.InvokeAsync();
    }

    public async Task HandleClickNext(bool isNext = true)
    {
        int currentPage;

        if (isNext)
        {
            currentPage = (PaginationInfo.CurrentBlock + 1) * PagePerPagingBlock - PagePerPagingBlock + 1;
        }
        else
        {
            currentPage = (PaginationInfo.CurrentBlock - 1) * PagePerPagingBlock - PagePerPagingBlock + 1;
        }

        PaginationInfo.CurrentPage = currentPage;
        await GetPaginationInfoAsync.InvokeAsync();
    }

    public bool IsFirstBlock()
    {
        return PaginationInfo.IsFirstBlock;
    }

    public bool IsLastBlock()
    {
        return PaginationInfo.IsLastBlock;
    }

    public bool IsEmptyList()
    {
        if (PaginationInfo != null && PaginationInfo.Data != null && PaginationInfo.Data.Any())
        {
            return false;
        }
        return true;
    }
}
